<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
<duplication lines="153" tokens="536">
<file line="21" path="C:\Users\brent\Work\workspace\ESAPI\src\main\java\org\owasp\esapi\reference\accesscontrol\ExperimentalAccessController.java"/>
<file line="22" path="C:\Users\brent\Work\workspace\ESAPI\src\main\java\org\owasp\esapi\reference\DefaultAccessController.java"/>
<codefragment>
<![CDATA[
	public DefaultAccessController() throws AccessControlException {
		ACRPolicyFileLoader policyDescriptor = new ACRPolicyFileLoader();
		PolicyDTO policyDTO = policyDescriptor.load();		
		ruleMap = policyDTO.getAccessControlRules();
	}
	
	public boolean isAuthorized(Object key, Object runtimeParameter) {
		try {
			AccessControlRule rule = (AccessControlRule)ruleMap.get(key);
			if(rule == null) {
				throw new AccessControlException("Access Denied",
						"AccessControlRule was not found for key: " + key); 
			}
			if(logger.isDebugEnabled()){ logger.debug(Logger.EVENT_SUCCESS, "Evaluating Authorization Rule \"" + key + "\" Using class: " + rule.getClass().getCanonicalName()); }
			return rule.isAuthorized(runtimeParameter);
		} catch(Exception e) {
			try {
				//Log the exception by throwing and then catching it.
				//TODO figure out what which string goes where.		
				throw new AccessControlException("Access Denied",
					"An unhandled Exception was " +
					"caught, so access is denied.",  
					e);	
			} catch(AccessControlException ace) {
				//the exception was just logged. There's nothing left to do.
			}
			return false; //fail closed
		}
	}

	public void assertAuthorized(Object key, Object runtimeParameter)
		throws AccessControlException {
		boolean isAuthorized = false;
		try {
			AccessControlRule rule = (AccessControlRule)ruleMap.get(key);
			if(rule == null) {
				throw new AccessControlException("Access Denied", 
						"AccessControlRule was not found for key: " + key); 
			}
			if(logger.isDebugEnabled()){ logger.debug(Logger.EVENT_SUCCESS, "Asserting Authorization Rule \"" + key + "\" Using class: " + rule.getClass().getCanonicalName()); }
			isAuthorized = rule.isAuthorized(runtimeParameter);
		} catch(Exception e) {
			//TODO figure out what which string goes where.		
			throw new AccessControlException("Access Denied", "An unhandled Exception was " +
					"caught, so access is denied." +
					"AccessControlException.",
					e);
		}
		if(!isAuthorized) {
			throw new AccessControlException("Access Denied", 
					"Access Denied for key: " + key + 
					" runtimeParameter: " + runtimeParameter);
		}
	}
	
	/**
	 * @param action
	 * @param data
	 * @throws AccessControlException
	 * @see org.owasp.esapi.reference.FileBasedAccessController#assertAuthorizedForData(java.lang.String, java.lang.Object)
	 */
	public void assertAuthorizedForData(String action, Object data)
			throws AccessControlException {
		this.assertAuthorized("AC 1.0 Data", new Object[] {action, data});
	}

	/**
	 * @param filepath
	 * @throws AccessControlException
	 * @see org.owasp.esapi.reference.FileBasedAccessController#assertAuthorizedForFile(java.lang.String)
	 * @deprecated
	 */
	public void assertAuthorizedForFile(String filepath)
			throws AccessControlException {
		this.assertAuthorized("AC 1.0 File", new Object[] {filepath});
	}

	/**
	 * @param functionName
	 * @throws AccessControlException
	 * @see org.owasp.esapi.reference.FileBasedAccessController#assertAuthorizedForFunction(java.lang.String)
	 */
	public void assertAuthorizedForFunction(String functionName)
			throws AccessControlException {
		this.assertAuthorized("AC 1.0 Function", new Object[] {functionName});
	}

	/**
	 * @param serviceName
	 * @throws AccessControlException
	 * @see org.owasp.esapi.reference.FileBasedAccessController#assertAuthorizedForService(java.lang.String)
	 */
	public void assertAuthorizedForService(String serviceName)
			throws AccessControlException {
		this.assertAuthorized("AC 1.0 Service", new Object[] {serviceName});
	}

	/**
	 * @param url
	 * @throws AccessControlException
	 * @see org.owasp.esapi.reference.FileBasedAccessController#assertAuthorizedForURL(java.lang.String)
	 */
	public void assertAuthorizedForURL(String url)
			throws AccessControlException {
		this.assertAuthorized("AC 1.0 URL", new Object[] {url});
	}

	/**
	 * @param action
	 * @param data
	 * @return
	 * @see org.owasp.esapi.reference.FileBasedAccessController#isAuthorizedForData(java.lang.String, java.lang.Object)
	 */
	public boolean isAuthorizedForData(String action, Object data) {
		return this.isAuthorized("AC 1.0 Data", new Object[] {action, data});
	}

	/**
	 * @param filepath
	 * @return
	 * @see org.owasp.esapi.reference.FileBasedAccessController#isAuthorizedForFile(java.lang.String)
	 */
	public boolean isAuthorizedForFile(String filepath) {
		return this.isAuthorized("AC 1.0 File", new Object[] {filepath});
	}

	/**
	 * @param functionName
	 * @return
	 * @see org.owasp.esapi.reference.FileBasedAccessController#isAuthorizedForFunction(java.lang.String)
	 */
	public boolean isAuthorizedForFunction(String functionName) {
		return this.isAuthorized("AC 1.0 Function", new Object[] {functionName});
	}

	/**
	 * @param serviceName
	 * @return
	 * @see org.owasp.esapi.reference.FileBasedAccessController#isAuthorizedForService(java.lang.String)
	 */
	public boolean isAuthorizedForService(String serviceName) {
		return this.isAuthorized("AC 1.0 Service", new Object[] {serviceName});
	}

	/**
	 * @param url
	 * @return
	 * @see org.owasp.esapi.reference.FileBasedAccessController#isAuthorizedForURL(java.lang.String)
	 */
	public boolean isAuthorizedForURL(String url) {
		return this.isAuthorized("AC 1.0 URL", new Object[] {url});
	}
}
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="315">
<file line="174" path="C:\Users\brent\Work\workspace\ESAPI\src\main\java\org\owasp\esapi\codecs\Base64.java"/>
<file line="236" path="C:\Users\brent\Work\workspace\ESAPI\src\main\java\org\owasp\esapi\codecs\Base64.java"/>
<codefragment>
<![CDATA[
    private final static byte[] _URL_SAFE_ALPHABET =
    {
      (byte)'A', (byte)'B', (byte)'C', (byte)'D', (byte)'E', (byte)'F', (byte)'G',
      (byte)'H', (byte)'I', (byte)'J', (byte)'K', (byte)'L', (byte)'M', (byte)'N',
      (byte)'O', (byte)'P', (byte)'Q', (byte)'R', (byte)'S', (byte)'T', (byte)'U', 
      (byte)'V', (byte)'W', (byte)'X', (byte)'Y', (byte)'Z',
      (byte)'a', (byte)'b', (byte)'c', (byte)'d', (byte)'e', (byte)'f', (byte)'g',
      (byte)'h', (byte)'i', (byte)'j', (byte)'k', (byte)'l', (byte)'m', (byte)'n',
      (byte)'o', (byte)'p', (byte)'q', (byte)'r', (byte)'s', (byte)'t', (byte)'u', 
      (byte)'v', (byte)'w', (byte)'x', (byte)'y', (byte)'z',
      (byte)'0', (byte)'1', (byte)'2', (byte)'3', (byte)'4', (byte)'5', 
      (byte)'6', (byte)'7', (byte)'8', (byte)'9', (byte)'-', (byte)'_'
]]>
</codefragment>
</duplication>
<duplication lines="57" tokens="305">
<file line="271" path="C:\Users\brent\Work\workspace\ESAPI\src\main\java\org\owasp\esapi\reference\JavaLogFactory.java"/>
<file line="248" path="C:\Users\brent\Work\workspace\ESAPI\src\main\java\org\owasp\esapi\reference\Log4JLogFactory.java"/>
<codefragment>
<![CDATA[
        	if (!jlogger.isEnabledFor( level )) return;
        	
            // create a random session number for the user to represent the user's 'session', if it doesn't exist already
            String sid = null;
            HttpServletRequest request = ESAPI.httpUtilities().getCurrentRequest();
            if ( request != null ) {
                HttpSession session = request.getSession( false );
                if ( session != null ) {
	                sid = (String)session.getAttribute("ESAPI_SESSION");
	                // if there is no session ID for the user yet, we create one and store it in the user's session
		            if ( sid == null ) {
		            	sid = ""+ ESAPI.randomizer().getRandomInteger(0, 1000000);
		            	session.setAttribute("ESAPI_SESSION", sid);
		            }
                }
            }
            
            // ensure there's something to log
            if ( message == null ) {
            	message = "";
            }
            
            // ensure no CRLF injection into logs for forging records
            String clean = message.replace( '\n', '_' ).replace( '\r', '_' );
            if ( ESAPI.securityConfiguration().getLogEncodingRequired() ) {
            	clean = ESAPI.encoder().encodeForHTML(message);
                if (!message.equals(clean)) {
                    clean += " (Encoded)";
                }
            }
            
			// log user information - username:session@ipaddr
        	User user = ESAPI.authenticator().getCurrentUser();            
			String userInfo = "";
			if ( user != null && type != null) {
				userInfo = user.getAccountName()+ ":" + sid + "@"+ user.getLastHostAddress();
			}

			// log server, port, app name, module name -- server:80/app/module
			StringBuilder appInfo = new StringBuilder();
			if ( ESAPI.currentRequest() != null && logServerIP ) {
				appInfo.append( ESAPI.currentRequest().getLocalAddr() + ":" + ESAPI.currentRequest().getLocalPort() );
			}
			if ( logAppName ) {
				appInfo.append( "/" + applicationName );
			}
			appInfo.append( "/"  + moduleName );
			
			// log the message
			jlogger.log(level, "[" + userInfo + " -> " + appInfo + "] " + clean, throwable);
        }

        /**
    	* {@inheritDoc}
    	*/
        public boolean isDebugEnabled() {
    	    return jlogger.isEnabledFor(Level.DEBUG);
]]>
</codefragment>
</duplication>
<duplication lines="40" tokens="168">
<file line="304" path="C:\Users\brent\Work\workspace\ESAPI\src\main\java\org\owasp\esapi\waf\ESAPIWebApplicationFirewallFilter.java"/>
<file line="361" path="C:\Users\brent\Work\workspace\ESAPI\src\main\java\org\owasp\esapi\waf\ESAPIWebApplicationFirewallFilter.java"/>
<codefragment>
<![CDATA[
			logger.debug(Logger.EVENT_SUCCESS,  "  Applying AFTER CHAIN rule:  " + rule.getClass().getName() );

			/*
			 * The rules execute in check(). The check() method will also log. All we have
			 * to do is decide what other actions to take.
			 */
			Action action = rule.check(request, response, httpResponse);

			if ( action.isActionNecessary() ) {

				if ( action instanceof BlockAction ) {
					if ( response != null ) {
						response.setStatus(appGuardConfig.getDefaultResponseCode());
					} else {
						httpResponse.setStatus(appGuardConfig.getDefaultResponseCode());
					}
					return;

				} else if ( action instanceof RedirectAction ) {
					sendRedirect(response, httpResponse, ((RedirectAction)action).getRedirectURL());
					return;

				} else if ( action instanceof DefaultAction ) {

					switch ( AppGuardianConfiguration.DEFAULT_FAIL_ACTION) {
						case AppGuardianConfiguration.BLOCK:
							if ( response != null ) {
								response.setStatus(appGuardConfig.getDefaultResponseCode());
							} else {
								httpResponse.setStatus(appGuardConfig.getDefaultResponseCode());
							}
							return;

						case AppGuardianConfiguration.REDIRECT:
							sendRedirect(response, httpResponse);
							return;
					}
				}
			}
		}
]]>
</codefragment>
</duplication>
<duplication lines="39" tokens="162">
<file line="52" path="C:\Users\brent\Work\workspace\ESAPI\src\main\java\org\owasp\esapi\waf\rules\RuleUtil.java"/>
<file line="97" path="C:\Users\brent\Work\workspace\ESAPI\src\main\java\org\owasp\esapi\waf\rules\RuleUtil.java"/>
<codefragment>
<![CDATA[
			Object o = en.nextElement();

			if ( o instanceof String ) {

				if ( s.equals((String)o)) {
					return true;
				}

			} else if ( o instanceof Integer ) {

				try {
					if ( Integer.parseInt(s) == ((Integer)o).intValue() ) {
						return true;
					}
				} catch (Exception e) {}

			} else if ( o instanceof Long ) {

				try {
					if ( Long.parseLong(s) == ((Long)o).longValue() ) {
						return true;
					}
				} catch (Exception e) {}

			} else if ( o instanceof Double ) {

				try {
					if ( Double.parseDouble(s) == ((Double)o).doubleValue() ) {
						return true;
					}
				} catch (Exception e) {}
			}

		}

		return false;
	}

	public static boolean testValue(String s, String test, int operator) {
]]>
</codefragment>
</duplication>
<duplication lines="34" tokens="149">
<file line="249" path="C:\Users\brent\Work\workspace\ESAPI\src\main\java\org\owasp\esapi\waf\ESAPIWebApplicationFirewallFilter.java"/>
<file line="310" path="C:\Users\brent\Work\workspace\ESAPI\src\main\java\org\owasp\esapi\waf\ESAPIWebApplicationFirewallFilter.java"/>
<codefragment>
<![CDATA[
			Action action = rule.check(request, response, httpResponse);

			if ( action.isActionNecessary() ) {

				if ( action instanceof BlockAction ) {
					if ( response != null ) {
						response.setStatus(appGuardConfig.getDefaultResponseCode());
					} else {
						httpResponse.setStatus(appGuardConfig.getDefaultResponseCode());
					}
					return;

				} else if ( action instanceof RedirectAction ) {
					sendRedirect(response, httpResponse, ((RedirectAction)action).getRedirectURL());
					return;

				} else if ( action instanceof DefaultAction ) {

					switch ( AppGuardianConfiguration.DEFAULT_FAIL_ACTION) {
						case AppGuardianConfiguration.BLOCK:
							if ( response != null ) {
								response.setStatus(appGuardConfig.getDefaultResponseCode());
							} else {
								httpResponse.setStatus(appGuardConfig.getDefaultResponseCode());
							}
							return;

						case AppGuardianConfiguration.REDIRECT:
							sendRedirect(response, httpResponse);
							return;
					}
				}
			}
		}
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="137">
<file line="253" path="C:\Users\brent\Work\workspace\ESAPI\src\main\java\org\owasp\esapi\codecs\Base64.java"/>
<file line="319" path="C:\Users\brent\Work\workspace\ESAPI\src\main\java\org\owasp\esapi\codecs\Base64.java"/>
<codefragment>
<![CDATA[
    private final static byte[] _ORDERED_DECODABET =
    {   
      -9,-9,-9,-9,-9,-9,-9,-9,-9,                 // Decimal  0 -  8
      -5,-5,                                      // Whitespace: Tab and Linefeed
      -9,-9,                                      // Decimal 11 - 12
      -5,                                         // Whitespace: Carriage Return
      -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 14 - 26
      -9,-9,-9,-9,-9,                             // Decimal 27 - 31
      -5,                                         // Whitespace: Space
      -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,              // Decimal 33 - 42
      -9,                                         // Plus sign at decimal 43
      -9,                                         // Decimal 44
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="133">
<file line="176" path="C:\Users\brent\Work\workspace\ESAPI\src\main\java\org\owasp\esapi\codecs\Base64.java"/>
<file line="305" path="C:\Users\brent\Work\workspace\ESAPI\src\main\java\org\owasp\esapi\codecs\Base64.java"/>
<codefragment>
<![CDATA[
      (byte)'A', (byte)'B', (byte)'C', (byte)'D', (byte)'E', (byte)'F', (byte)'G',
      (byte)'H', (byte)'I', (byte)'J', (byte)'K', (byte)'L', (byte)'M', (byte)'N',
      (byte)'O', (byte)'P', (byte)'Q', (byte)'R', (byte)'S', (byte)'T', (byte)'U',
      (byte)'V', (byte)'W', (byte)'X', (byte)'Y', (byte)'Z',
      (byte)'_',
]]>
</codefragment>
</duplication>
<duplication lines="10" tokens="131">
<file line="193" path="C:\Users\brent\Work\workspace\ESAPI\src\main\java\org\owasp\esapi\codecs\Base64.java"/>
<file line="253" path="C:\Users\brent\Work\workspace\ESAPI\src\main\java\org\owasp\esapi\codecs\Base64.java"/>
<codefragment>
<![CDATA[
    private final static byte[] _URL_SAFE_DECODABET =
    {   
      -9,-9,-9,-9,-9,-9,-9,-9,-9,                 // Decimal  0 -  8
      -5,-5,                                      // Whitespace: Tab and Linefeed
      -9,-9,                                      // Decimal 11 - 12
      -5,                                         // Whitespace: Carriage Return
      -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 14 - 26
      -9,-9,-9,-9,-9,                             // Decimal 27 - 31
      -5,                                         // Whitespace: Space
      -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,              // Decimal 33 - 42
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="130">
<file line="179" path="C:\Users\brent\Work\workspace\ESAPI\src\main\java\org\owasp\esapi\codecs\Base64.java"/>
<file line="309" path="C:\Users\brent\Work\workspace\ESAPI\src\main\java\org\owasp\esapi\codecs\Base64.java"/>
<codefragment>
<![CDATA[
      (byte)'_',
      (byte)'a', (byte)'b', (byte)'c', (byte)'d', (byte)'e', (byte)'f', (byte)'g',
      (byte)'h', (byte)'i', (byte)'j', (byte)'k', (byte)'l', (byte)'m', (byte)'n',
      (byte)'o', (byte)'p', (byte)'q', (byte)'r', (byte)'s', (byte)'t', (byte)'u',
      (byte)'v', (byte)'w', (byte)'x', (byte)'y', (byte)'z'
]]>
</codefragment>
</duplication>
<duplication lines="15" tokens="116">
<file line="77" path="C:\Users\brent\Work\workspace\ESAPI\src\main\java\org\owasp\esapi\filters\SecurityWrapperResponse.java"/>
<file line="142" path="C:\Users\brent\Work\workspace\ESAPI\src\main\java\org\owasp\esapi\reference\DefaultHTTPUtilities.java"/>
<codefragment>
<![CDATA[
    public void addCookie(HttpServletResponse response, Cookie cookie) {
        String name = cookie.getName();
        String value = cookie.getValue();
        int maxAge = cookie.getMaxAge();
        String domain = cookie.getDomain();
        String path = cookie.getPath();
        boolean secure = cookie.getSecure();

        // validate the name and value
        ValidationErrorList errors = new ValidationErrorList();
        String cookieName = ESAPI.validator().getValidInput("cookie name", name, "HTTPCookieName", 50, false, errors);
        String cookieValue = ESAPI.validator().getValidInput("cookie value", value, "HTTPCookieValue", 5000, false, errors);

        // if there are no errors, then set the cookie either with a header or normally
        if (errors.size() == 0) {
]]>
</codefragment>
</duplication>
<duplication lines="8" tokens="106">
<file line="205" path="C:\Users\brent\Work\workspace\ESAPI\src\main\java\org\owasp\esapi\codecs\Base64.java"/>
<file line="267" path="C:\Users\brent\Work\workspace\ESAPI\src\main\java\org\owasp\esapi\codecs\Base64.java"/>
<codefragment>
<![CDATA[
      -9,                                         // Slash at decimal 47
      52,53,54,55,56,57,58,59,60,61,              // Numbers zero through nine
      -9,-9,-9,                                   // Decimal 58 - 60
      -1,                                         // Equals sign at decimal 61
      -9,-9,-9,                                   // Decimal 62 - 64
      0,1,2,3,4,5,6,7,8,9,10,11,12,13,            // Letters 'A' through 'N'
      14,15,16,17,18,19,20,21,22,23,24,25,        // Letters 'O' through 'Z'
      -9,-9,-9,-9,                                // Decimal 91 - 94
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="104">
<file line="147" path="C:\Users\brent\Work\workspace\ESAPI\src\main\java\org\owasp\esapi\codecs\MySQLCodec.java"/>
<file line="62" path="C:\Users\brent\Work\workspace\ESAPI\src\main\java\org\owasp\esapi\codecs\OracleCodec.java"/>
<codefragment>
<![CDATA[
	public Character decodeCharacter( PushbackString input ) {
		input.mark();
		Character first = input.next();
		if ( first == null ) {
			input.reset();
			return null;
		}

		// if this is not an encoded character, return null
		if ( first.charValue() != '\'' ) {
			input.reset();
			return null;
		}

		Character second = input.next();
		if ( second == null ) {
			input.reset();
			return null;
		}
		
		// if this is not an encoded character, return null
		if ( second.charValue() != '\'' ) {
			input.reset();
			return null;
		}
		return( Character.valueOf( '\'' ) );
	}
]]>
</codefragment>
</duplication>
</pmd-cpd>