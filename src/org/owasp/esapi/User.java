/**
 * OWASP Enterprise Security API (ESAPI)
 * 
 * This file is part of the Open Web Application Security Project (OWASP)
 * Enterprise Security API (ESAPI) project. For details, please see
 * <a href="http://www.owasp.org/index.php/ESAPI">http://www.owasp.org/index.php/ESAPI</a>.
 *
 * Copyright (c) 2007 - The OWASP Foundation
 * 
 * The ESAPI is published by OWASP under the BSD license. You should read and accept the
 * LICENSE before you use, modify, and/or redistribute this software.
 * 
 * @author Jeff Williams <a href="http://www.aspectsecurity.com">Aspect Security</a>
 * @created 2007
 */
package org.owasp.esapi;

import java.security.Principal;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import org.owasp.esapi.errors.AuthenticationException;
import org.owasp.esapi.errors.EncryptionException;
import org.owasp.esapi.reference.DefaultEncoder;

/**
 * The User interface represents an application user or user account. There is quite a lot of information that an
 * application must store for each user in order to enforce security properly. There are also many rules that govern
 * authentication and identity management.
 * <P>
 * <img src="doc-files/Authenticator.jpg" height="600">
 * <P>
 * A user account can be in one of several states. When first created, a User should be disabled, not expired, and
 * unlocked. To start using the account, an administrator should enable the account. The account can be locked for a
 * number of reasons, most commonly because they have failed login for too many times. Finally, the account can expire
 * after the expiration date has been reached. The User must be enabled, not expired, and unlocked in order to pass
 * authentication.
 * 
 * @author <a href="mailto:jeff.williams@aspectsecurity.com?subject=ESAPI question">Jeff Williams</a> at <a
 * href="http://www.aspectsecurity.com">Aspect Security</a>
 * @since June 1, 2007
 */

public interface User extends Principal {

    /**
     * Adds a role to an account.
     * 
     * @param role 
     * 		the role to add
     * 
     * @throws AuthenticationException 
     * 		the authentication exception
     */
    void addRole(String role) throws AuthenticationException;

    /**
     * Adds a set of roles to an account.
     * 
     * @param newRoles 
     * 		the new roles to add
     * 
     * @throws AuthenticationException 
     * 		the authentication exception
     */
    void addRoles(Set newRoles) throws AuthenticationException;

    /**
     * Sets the user's password, performing a verification of the user's old password, the equality of the two new
     * passwords, and the strength of the new password.
     * 
     * @param oldPassword 
     * 		the old password
     * @param newPassword1 
     * 		the new password
     * @param newPassword2 
     * 		the new password - used to verify that the new password was typed correctly
     * 
     * @throws AuthenticationException 
     * 		if newPassword1 does not match newPassword2, if oldPassword does not match the stored old password, or if the new password does not meet complexity requirements 
     * @throws EncryptionException 
     */
    void changePassword(String oldPassword, String newPassword1, String newPassword2) throws AuthenticationException, EncryptionException;

    /**
     * Disable account.
     * 
     * @throws AuthenticationException the authentication exception
     */
    void disable();

    /**
     * Enable account.
     * 
     * @throws AuthenticationException the authentication exception
     */
    void enable();

    /**
     * Gets the account id.
     * 
     * @return the account id
     */
    long getAccountId();
    
    /**
     * Gets the account name.
     * 
     * @return the account name
     */
    String getAccountName();

    /**
     * Gets the CSRF token.
     * 
     * @return the CSRF token
     */
    String getCSRFToken();

    /**
     * Returns the date that the current user's account will expire, usually when the account will be disabled.
     *
     * @return Date representing the account expiration time.
     */
    Date getExpirationTime();

    /**
     * Returns the number of failed login attempts since the last successful login for an account. This method is
     * intended to be used as a part of the account lockout feature, to help protect against brute force attacks.
     * However, the implementor should be aware that lockouts can be used to prevent access to an application by a
     * legitimate user, and should consider the risk of denial of service.
     * 
     * @return the number of failed login attempts since the last successful login
     */
    int getFailedLoginCount();

    /**
     * Returns the last host address used by the user. This will be used in any log messages generated by the processing
     * of this request.
     * 
     * @return the last host address used by the user
     */
    String getLastHostAddress();

	/**
     * Returns the date of the last failed login time for a user. This date should be used in a message to users after a
     * successful login, to notify them of potential attack activity on their account.
     * 
     * @return date of the last failed login
     * 
     * @throws AuthenticationException 
     * 		the authentication exception
     */
    Date getLastFailedLoginTime() throws AuthenticationException;

    /**
     * Returns the date of the last successful login time for a user. This date should be used in a message to users
     * after a successful login, to notify them of potential attack activity on their account.
     * 
     * @return date of the last successful login
     */
    Date getLastLoginTime();

    /**
     * Gets the date of user's last password change.
     * 
     * @return the date of last password change
     */
    Date getLastPasswordChangeTime();

    /**
     * Gets the roles assigned to a particular account.
     * 
     * @return an immutable set of roles
     */
    Set getRoles();

    /**
     * Gets the screen name.
     * 
     * @return the screen name
     */
    String getScreenName();

    /**
     * Increment failed login count.
     */
    void incrementFailedLoginCount();

    /**
     * Checks if user is anonymous.
     * 
     * @return true, if user is anonymous
     */
    boolean isAnonymous();

    /**
     * Checks if an account is currently enabled.
     * 
     * @return true, if account is enabled 
     */
    boolean isEnabled();

    /**
     * Checks if an account is expired.
     * 
     * @return true, if account is expired
     */
    boolean isExpired();

    /**
     * Checks if an account has been assigned a particular role.
     * 
     * @param role 
     * 		the role for which to check
     * 
     * @return true, if role has been assigned to user
     */
    boolean isInRole(String role);

    /**
     * Checks if an account is locked.
     * 
     * @return true, if account is locked
     */
    boolean isLocked();

    /**
     * Tests to see if the user is currently logged in.
     * 
     * @return true, if the user is logged in
     */
    boolean isLoggedIn();

    /**
     * Tests to see if the user's session has exceeded the absolute time out.
     * 
     * @return true, if user's session has exceeded the absolute time out
     */
    boolean isSessionAbsoluteTimeout();

    /**
     * Tests to see if the user's session has timed out from inactivity.
     * 
     * @return true, if user's session has timed out from inactivity
     */
    boolean isSessionTimeout();

    /**
     * Lock the user's account.
     */
    void lock();

    /**
     * Login with password.
     * 
     * @param password 
     * 		the password
     * @throws AuthenticationException 
     * 		if login fails
     */
    void loginWithPassword(String password) throws AuthenticationException;

    /**
     * Logout this user.
     */
    void logout();

    /**
     * Removes a role from an account.
     * 
     * @param role 
     * 		the role to remove
     * @throws AuthenticationException 
     * 		the authentication exception
     */
    void removeRole(String role) throws AuthenticationException;

    /**
     * Returns a token to be used as a prevention against CSRF attacks. This token should be added to all links and
     * forms. The application should verify that all requests contain the token, or they may have been generated by a
     * CSRF attack. It is generally best to perform the check in a centralized location, either a filter or controller.
     * See the verifyCSRFToken method.
     * 
     * @return the new CSRF token
     * 
     * @throws AuthenticationException 
     * 		the authentication exception
     */
    String resetCSRFToken() throws AuthenticationException;

    /**
     * Sets the account name.
     * 
     * @param accountName the new account name
     */
    void setAccountName(String accountName);

    /**
     * Sets the time when this user's account will expire.
     * 
     * @param expirationTime the new expiration time
     */
	void setExpirationTime(Date expirationTime);

	/**
     * Sets the roles of this account.
     * 
     * @param roles 
     * 		the new roles
     * 
     * @throws AuthenticationException 
     * 		the authentication exception
     */
    void setRoles(Set roles) throws AuthenticationException;

    /**
     * Sets the screen name.
     * 
     * @param screenName the new screen name
     */
    void setScreenName(String screenName);

    /**
     * Unlock account.
     */
    void unlock();

	/**
	 * Verify that the supplied password matches the password for this user. This method
	 * is typically used for "reauthentication" for the most sensitive functions, such
	 * as transactions, changing email address, and changing other account information.
	 * 
	 * @param password 
	 * 		the password that the user entered
	 * 
	 * @return true, if the password passed in matches the account's password
	 * 
	 * @throws EncryptionException 
	 */
	public boolean verifyPassword(String password) throws EncryptionException;

	/**
	 * Set the time of the last failed login for this user.
	 * @param lastFailedLoginTime
	 */
	void setLastFailedLoginTime(Date lastFailedLoginTime);
	
	/**
	 * Set the last remote host address used by this user.
	 * @param remoteHost
	 */
	void setLastHostAddress(String remoteHost);
	
	/**
	 * Set the time of the last successful login for this user.
	 * @param lastLoginTime
	 */
	void setLastLoginTime(Date lastLoginTime);
	
	/**
	 * Set the time of the last password change for this user.
	 * @param lastPasswordChangeTime
	 */
	void setLastPasswordChangeTime(Date lastPasswordChangeTime);

	
	
	/**
	 * The ANONYMOUS user is used to represent an unidentified user. Since there is
	 * always a real user, the ANONYMOUS user is better than using null to represent
	 * this.
	 */
    public final User ANONYMOUS = new User() {

    	private String csrfToken = "";
    	
		/* (non-Javadoc)
         * @see org.owasp.esapi.User#addRole(java.lang.String)
         */
        public void addRole(String role) throws AuthenticationException {
        	throw new RuntimeException("Invalid operation for the anonymous user");
        }

		/* (non-Javadoc)
         * @see org.owasp.esapi.User#addRoles(java.util.Set)
         */
        public void addRoles(Set newRoles) throws AuthenticationException {
        	throw new RuntimeException("Invalid operation for the anonymous user");
        }

		/* (non-Javadoc)
         * @see org.owasp.esapi.User#changePassword(java.lang.String, java.lang.String, java.lang.String)
         */
        public void changePassword(String oldPassword, String newPassword1,
                String newPassword2) throws AuthenticationException,
                EncryptionException {
        	throw new RuntimeException("Invalid operation for the anonymous user");
        }

		/* (non-Javadoc)
         * @see org.owasp.esapi.User#disable()
         */
        public void disable() {
        	throw new RuntimeException("Invalid operation for the anonymous user");
        }

		/* (non-Javadoc)
         * @see org.owasp.esapi.User#enable()
         */
        public void enable() {
        	throw new RuntimeException("Invalid operation for the anonymous user");
        }

		/* (non-Javadoc)
         * @see org.owasp.esapi.User#getAccountId()
         */
        public long getAccountId() {
	        return 0;
        }

		/* (non-Javadoc)
         * @see org.owasp.esapi.User#getAccountName()
         */
        public String getAccountName() {
	        return "Anonymous";
        }

        public String getName() {
        	return getAccountName();
        }
        
		/* (non-Javadoc)
         * @see org.owasp.esapi.User#getCSRFToken()
         */
        public String getCSRFToken() {
	        return csrfToken;
        }

		/* (non-Javadoc)
         * @see org.owasp.esapi.User#getLastFailedLoginTime()
         */
        public Date getExpirationTime() {
	        return null;
        }

		/* (non-Javadoc)
         * @see org.owasp.esapi.User#getFailedLoginCount()
         */
        public int getFailedLoginCount() {
	        return 0;
        }

		/* (non-Javadoc)
         * @see org.owasp.esapi.User#getLastFailedLoginTime()
         */
        public Date getLastFailedLoginTime() throws AuthenticationException {
	        return null;
        }

		/* (non-Javadoc)
         * @see org.owasp.esapi.User#getLastHostAddress()
         */
        public String getLastHostAddress() {
	        return "unknown";
        }

		/* (non-Javadoc)
         * @see org.owasp.esapi.User#getLastLoginTime()
         */
        public Date getLastLoginTime() {
	        return null;
        }

		/* (non-Javadoc)
         * @see org.owasp.esapi.User#getLastPasswordChangeTime()
         */
        public Date getLastPasswordChangeTime() {
	        return null;
        }

		/* (non-Javadoc)
         * @see org.owasp.esapi.User#getRoles()
         */
        public Set getRoles() {
	        return new HashSet();
        }

		/* (non-Javadoc)
         * @see org.owasp.esapi.User#getScreenName()
         */
        public String getScreenName() {
	        return "Anonymous";
        }

		/* (non-Javadoc)
         * @see org.owasp.esapi.User#incrementFailedLoginCount()
         */
        public void incrementFailedLoginCount() {
        	throw new RuntimeException("Invalid operation for the anonymous user");
        }

		/* (non-Javadoc)
         * @see org.owasp.esapi.User#isAnonymous()
         */
        public boolean isAnonymous() {
	        return true;
        }

		/* (non-Javadoc)
         * @see org.owasp.esapi.User#isEnabled()
         */
        public boolean isEnabled() {
	        return false;
        }

		/* (non-Javadoc)
         * @see org.owasp.esapi.User#isExpired()
         */
        public boolean isExpired() {
	        return false;
        }

		/* (non-Javadoc)
         * @see org.owasp.esapi.User#isInRole(java.lang.String)
         */
        public boolean isInRole(String role) {
	        return false;
        }

		/* (non-Javadoc)
         * @see org.owasp.esapi.User#isLocked()
         */
        public boolean isLocked() {
	        return false;
        }

		/* (non-Javadoc)
         * @see org.owasp.esapi.User#isLoggedIn()
         */
        public boolean isLoggedIn() {
	        return false;
        }

		/* (non-Javadoc)
         * @see org.owasp.esapi.User#isSessionAbsoluteTimeout()
         */
        public boolean isSessionAbsoluteTimeout() {
	        return false;
        }

		/* (non-Javadoc)
         * @see org.owasp.esapi.User#isSessionTimeout()
         */
        public boolean isSessionTimeout() {
	        return false;
        }

		/* (non-Javadoc)
         * @see org.owasp.esapi.User#lock()
         */
        public void lock() {
        	throw new RuntimeException("Invalid operation for the anonymous user");
        }

		/* (non-Javadoc)
         * @see org.owasp.esapi.User#loginWithPassword(java.lang.String)
         */
        public void loginWithPassword(String password)
                throws AuthenticationException {
        	throw new RuntimeException("Invalid operation for the anonymous user");
        }

		/* (non-Javadoc)
         * @see org.owasp.esapi.User#logout()
         */
        public void logout() {
        	throw new RuntimeException("Invalid operation for the anonymous user");
        }

		/* (non-Javadoc)
         * @see org.owasp.esapi.User#removeRole(java.lang.String)
         */
        public void removeRole(String role) throws AuthenticationException {
        	throw new RuntimeException("Invalid operation for the anonymous user");
        }

		/* (non-Javadoc)
         * @see org.owasp.esapi.User#resetCSRFToken()
         */
        public String resetCSRFToken() throws AuthenticationException {
    		csrfToken = ESAPI.randomizer().getRandomString(8, DefaultEncoder.CHAR_ALPHANUMERICS);
    		return csrfToken;
        }

		/* (non-Javadoc)
         * @see org.owasp.esapi.User#setAccountName(java.lang.String)
         */
        public void setAccountName(String accountName) {
        	throw new RuntimeException("Invalid operation for the anonymous user");
        }

		/* (non-Javadoc)
         * @see org.owasp.esapi.User#setAccountName(java.lang.String)
         */
    	public void setExpirationTime(Date expirationTime) {
        	throw new RuntimeException("Invalid operation for the anonymous user");
        }
        
        /* (non-Javadoc)
         * @see org.owasp.esapi.User#setRoles(java.util.Set)
         */
        public void setRoles(Set roles) throws AuthenticationException {
        	throw new RuntimeException("Invalid operation for the anonymous user");
        }

		/* (non-Javadoc)
         * @see org.owasp.esapi.User#setScreenName(java.lang.String)
         */
        public void setScreenName(String screenName) {
        	throw new RuntimeException("Invalid operation for the anonymous user");
        }

		/* (non-Javadoc)
         * @see org.owasp.esapi.User#unlock()
         */
        public void unlock() {
        	throw new RuntimeException("Invalid operation for the anonymous user");
        }

		/* (non-Javadoc)
         * @see org.owasp.esapi.User#verifyPassword(java.lang.String)
         */
        public boolean verifyPassword(String password) throws EncryptionException {
        	throw new RuntimeException("Invalid operation for the anonymous user");
        }

        public void setLastFailedLoginTime(Date lastFailedLoginTime) {
        	throw new RuntimeException("Invalid operation for the anonymous user");
        }
        
    	public void setLastLoginTime(Date lastLoginTime) {
    		throw new RuntimeException("Invalid operation for the anonymous user");
    	}

    	public void setLastHostAddress(String remoteHost) {
        	throw new RuntimeException("Invalid operation for the anonymous user");
        }
                
        public void setLastPasswordChangeTime(Date lastPasswordChangeTime) {
        	throw new RuntimeException("Invalid operation for the anonymous user");
        }
    };
}
